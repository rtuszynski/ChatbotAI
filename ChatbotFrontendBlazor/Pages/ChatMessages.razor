@using ChatbotFrontendBlazor.Models
@using ChatbotFrontendBlazor.Services
@inject ChatService ChatService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3 class="text-primary">Chat Messages</h3>

    @if (messages == null)
    {
        <p class="text-muted">Loading...</p>
    }
    else
    {
        <div class="list-group" id="chatMessages" style="max-height: 400px; overflow-y: auto;">
            @foreach (var message in messages.Take(messages.Count - 1))
            {
                <div class="list-group-item">
                    <strong class="text-secondary">User:</strong> @message.UserMessage<br />
                    <strong class="text-secondary">Bot:</strong> @message.BotResponse<br />

                    @if (message.Rating != null)
                    {
                        <strong class="text-secondary">Rating: </strong>
                        @if (message.Rating == 1)
                        {
                            <strong class="text-success">GOOD</strong>
                        }
                        else if (message.Rating == -1)
                        {
                            <strong class="text-danger">BAD</strong>
                        }
                    }

                    <div class="mt-2">
                        <button class="btn btn-success btn-sm me-2" @onclick="() => UpdateRating(message.Id, 1)">👍</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => UpdateRating(message.Id, -1)">👎</button>
                    </div>
                </div>
            }

            @if (messages.Count > 0)
            {
                var lastMessage = messages.Last();
                <div class="list-group-item">
                    <strong class="text-secondary">User:</strong> @lastMessage.UserMessage<br />
                    <strong class="text-secondary">Bot:</strong> <span id="botResponse-@lastMessage.Id">@botResponse</span><br />

                    @if (lastMessage.Rating != null)
                    {
                        <strong class="text-secondary">Rating: </strong>
                        @if (lastMessage.Rating == 1)
                        {
                            <strong class="text-success">GOOD</strong>
                        }
                        else if (lastMessage.Rating == -1)
                        {
                            <strong class="text-danger">BAD</strong>
                        }
                    }

                    <div class="mt-2">
                        <button class="btn btn-success btn-sm me-2" @onclick="() => UpdateRating(lastMessage.Id, 1)">👍</button>
                        <button class="btn btn-danger btn-sm me-2" @onclick="() => UpdateRating(lastMessage.Id, -1)">👎</button>
                        @if (isTyping)
                        {
                            <button class="btn btn-warning btn-sm" @onclick="StopTypeWriter">Przerwij</button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ChatMessage> messages;
    private bool isFirstLoad = true;
    private string botResponse = string.Empty;
    private bool isTyping = false;

    protected override async Task OnInitializedAsync()
    {
        messages = await ChatService.GetMessagesAsync();
        if (messages.Count > 0)
        {
            var lastMessage = messages.Last();
            botResponse = lastMessage.BotResponse;
        }
        isFirstLoad = false;
    }

    private async Task UpdateRating(int id, int rating)
    {
        await ChatService.UpdateRatingAsync(id, rating);
        messages = await ChatService.GetMessagesAsync();
    }

    public async Task RefreshMessages()
    {
        messages = await ChatService.GetMessagesAsync();
        StateHasChanged();
        await ScrollToBottom();
        if (!isFirstLoad && messages.Count > 0)
        {
            var lastMessage = messages.Last();
            botResponse = string.Empty;
            isTyping = true;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("clearElementContent", $"botResponse-{lastMessage.Id}");
            await JSRuntime.InvokeVoidAsync("typeWriter", $"botResponse-{lastMessage.Id}", lastMessage.BotResponse);
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    private async Task StopTypeWriter()
    {
        await JSRuntime.InvokeVoidAsync("stopTypeWriter");
        isTyping = false;

        botResponse = await JSRuntime.InvokeAsync<string>("getElementContent", $"botResponse-{messages.Last().Id}");

        var lastMessage = messages.Last();
        lastMessage.BotResponse = botResponse;
        await ChatService.UpdateMessageAsync(lastMessage);

        StateHasChanged();
    }
}
